name: CI - Security Misconfiguration App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 1️⃣ Etapa de build e testes de qualidade do código
  build:
    runs-on: ubuntu-latest
    steps:
      # Faz checkout do repositório
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      # Configura Node.js (versão 22) e cache para dependências
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      # Instala dependências
      - name: 📦 Install dependencies
        run: |
          cd server
          npm install

      # Executa Prettier para garantir estilo de código
      - name: 💅 Run Prettier Check
        run: |
          cd server
          npm run format:check

      # Executa ESLint para análise estática
      - name: 🔍 Run ESLint
        run: |
          cd server
          npm run lint

      # Compila o TypeScript
      - name: 🏗 Build TypeScript
        run: |
          cd server
          npm run build

  # 2️⃣ Etapa de build e auditoria de containers
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      # Configura ambiente de build do Docker
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Faz build das imagens definidas no docker-compose
      - name: 📦 Build Docker images
        run: |
          docker compose -f docker-compose.yml build

      # Sobe os containers em background e exibe status
      - name: 🚀 Run containers
        run: |
          docker compose -f docker-compose.yml up -d
          sleep 20
          docker ps -a

      # Executa Docker Bench Security (auditoria de segurança)
      - name: 🛡 Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host \
            --cap-add audit_control \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            docker/docker-bench-security || true

      # Derruba containers após os testes
      - name: 🛑 Stop containers
        if: always()
        run: docker compose -f docker-compose.yml down

  # 3️⃣ Etapa de segurança com Trivy
  trivy-scan:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4

      # Usa ação oficial do Trivy para escanear a imagem
      - name: 🔎 Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'Dockerfile'
          format: 'table'
          exit-code: '1'         # Falha se encontrar vulnerabilidades críticas
          ignore-unfixed: true   # Ignora CVEs ainda sem correção
          vuln-type: 'os,library' # Analisa sistema e dependências

  # 4️⃣ Etapa de segurança com Snyk
  snyk-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      # Executa Snyk para verificar vulnerabilidades de libs e containers
      - name: 🧪 Run Snyk Scan
        uses: snyk/actions/node@master
        env:
          # Token deve ser configurado no GitHub Secrets
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
