name: CI - Security Misconfiguration App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 1️⃣ Etapa de build e testes de qualidade do código
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd server
          npm install

      - name: 💅 Run Prettier Check
        run: |
          cd server
          npm run format:check

      - name: 🔍 Run ESLint
        run: |
          cd server
          npm run lint

      - name: 🏗 Build TypeScript
        run: |
          cd server
          npm run build

  # 2️⃣ Etapa de build e auditoria de containers
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📦 Build Docker images
        run: |
          docker compose -f docker-compose.yml build

      - name: 🚀 Run containers
        run: |
          docker compose -f docker-compose.yml up -d
          sleep 20
          docker ps -a

      - name: 🛡 Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host \
            --cap-add audit_control \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            docker/docker-bench-security || true

      - name: 🛑 Stop containers
        if: always()
        run: docker compose -f docker-compose.yml down

  # 3️⃣ Etapa de segurança com Trivy
  trivy-scan:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4

      - name: 🐳 Build Docker image
        run: docker build -t security-misconfig-app:latest -f server/Dockerfile ./server

      - name: 🔎 Run Trivy Scan (Summary)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-misconfig-app:latest'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: 🔎 Run Trivy Scan (JSON Report)
        run: |
          trivy image --format json --output trivy-report.json security-misconfig-app:latest

      - name: 📤 Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  # 4️⃣ Etapa de segurança com Snyk
  snyk-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      # Instala dependências necessárias para o Snyk analisar
      - name: 📦 Install dependencies
        run: |
          cd server
          npm install

      # Scan das dependências Node.js (resumo no log)
      - name: 🧪 Run Snyk Scan (Node.js - Summary)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=server/package.json --package-manager=npm --severity-threshold=high

      # Scan das dependências Node.js (JSON Report)
      - name: 🧪 Run Snyk Scan (Node.js - JSON Report)
        run: |
          cd server
          npx snyk test --json --file=package.json > ../snyk-node-report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: 📤 Upload Snyk Node Report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-node-report
          path: snyk-node-report.json

